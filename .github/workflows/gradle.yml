name: CI/CD

on:
  push:
    branches: ["dev"]

  pull_request:
    types: [closed]
    branches: ["dev"]


permissions:  
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
    
    ## jdk setting
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    ## gradle caching - 빌드 시간 향상
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-  

    ## create application-prod.yml
    - name: make application.yml
      run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          touch ./application.yml
          echo '${{ secrets.PROPERTIES_PROD }}' > ./application.yml
      shell: bash

    ## grant execute permission for gradlew
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    ## gradle build
    - name: Build with Gradle
      run: ./gradlew build -x test
      
    ## docker build & push to production
    - name: Docker build & push to prod
      run: |
          docker login -u ${{ secrets.USERNAME }} -p ${{ secrets.PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKERHUB }}/ssgssak .
          docker push ${{ secrets.DOCKERHUB }}/ssgssak
          
    ## deploy to production
    - name: Deploy to prod
      uses: appleboy/ssh-action@master
      id: deploy-prod
      with:
        host: ${{ secrets.EC2IPADDRESS}} # EC2 퍼블릭 IPv4 DNS #ec2ip주소 
        username: ubuntu
        key: ${{ secrets.EC2PEMKEY }}
        envs: GITHUB_SHA
        script: |
          sudo docker ps
          sudo docker stop spring  
          sudo docker rm spring 
          sudo docker pull ${{ secrets.USERNAME }}/ssgssak
          sudo docker run -d --name spring -p 8080:8080 ${{ secrets.USERNAME }}/ssgssak
          sudo docker image prune -f
